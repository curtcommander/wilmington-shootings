function vh(v){const h=Math.max(document.documentElement.clientHeight,window.innerHeight||0);return v*h/100}function vw(v){const h=Math.max(document.documentElement.clientWidth,window.innerWidth||0);return v*h/100}const margin=vh(3),barChartContainer=d3.select("#svg-bar-chart"),barChart=barChartContainer.append("g").attr("id","svg-bar-chart-inner").attr("transform","translate("+margin+","+margin+")"),svgBarChartStyles=window.getComputedStyle(document.getElementById("svg-bar-chart")),heightBarChart=parseFloat(svgBarChartStyles.getPropertyValue("height"))-2*margin-(6+.71*vh(3)),yMaxTotal=197,yMaxYTD=90,yScaleTotal=d3.scaleLinear().range([heightBarChart,0]).domain([0,197]),yScaleYTD=d3.scaleLinear().range([heightBarChart,0]).domain([0,90]),yAxis=barChart.append("g").attr("id","y-axis"),widthBarChart=parseFloat(svgBarChartStyles.getPropertyValue("width"))-2*margin;let years=[];const yearCurrent=2020;let y=2011;for(;y<=2020;)years.push(y),y++;const xScale=d3.scaleBand().range([0,widthBarChart]).domain(years).padding(.2),xBandwidth=xScale.bandwidth(),xAxis=barChart.append("g").attr("id","x-axis").attr("transform","translate(0,"+heightBarChart+")").call(d3.axisBottom(xScale).tickSizeOuter(0)),colors=["black","#D90022"];function setSeriesVars(){seriesNum=document.getElementById("select-series").value,seriesNum<2?yScale=yScaleTotal:yScale=yScaleYTD,dataSeries=d3.stack().keys(seriesNames[seriesNum])(data)}function plotBarChart(){const rects=document.querySelector("#rects-bar-chart");rects&&rects.parentNode.removeChild(rects),barChart.append("g").attr("id","rects-bar-chart").selectAll("g").data(dataSeries).enter().append("g").attr("id",(function(d,i){return"rects-bar-chart-"+colors[i]})).attr("fill",(function(d,i){return colors[i]})).selectAll("rect").data((function(d){return d})).enter().append("rect").attr("x",(function(d,i){return xScale(2020-i)})).attr("y",(function(d){return yScale(d[1]-d[0])+margin-margin})).attr("width",xBandwidth).attr("height",(function(d){return heightBarChart-yScale(d[1]-d[0])}))}function getLabelText(d){return seriesNum<2?yMax=197:yMax=90,h=(d[1]-d[0])/yMax,h<.05?"":d[1]-d[0]}function labelsBarChart(){const labels=document.querySelector("#labels-bar-chart");labels&&labels.parentNode.removeChild(labels),barChart.append("g").attr("id","labels-bar-chart").selectAll("g").data(dataSeries).enter().append("g").attr("id",(function(d,i){return"labels-bar-chart-"+colors[i]})).selectAll("text").data((function(d){return d})).enter().append("text").attr("class","label-bar-chart").attr("x",(function(d,i){return xScale(2020-i)+xBandwidth/2})).attr("y",(function(d){return yScale(d[1]-d[0])+margin-.5})).text((function(d){return getLabelText(d)})).attr("text-anchor","middle").attr("fill","white").style("font-size","3vh")}function getRectBlack(rect){const x=rect.attributes.x.value;return d3.select('#rects-bar-chart-black rect[x="'+x+'"]')}function rectMouseenter(rect){rectBlack=getRectBlack(rect),h=Number(rectBlack.attr("height")),rectBlack.attr("stroke","black"),rectBlack.attr("stroke-width","1.5vh"),rectBlack.attr("stroke-opacity","0.4"),rectBlack.attr("stroke-dasharray",xBandwidth+h-.1+" "+(xBandwidth+.2))}function rectMouseout(rect){rectBlack=getRectBlack(rect),rectBlack.attr("stroke-width","0")}function bindRectHoverListeners(){rects=document.querySelectorAll("rect"),rects.forEach((function(rect){rect.addEventListener("mouseover",(function(){rectMouseenter(rect)})),rect.addEventListener("mouseout",(function(){rectMouseout(rect)}))}))}function bindRectClickListeners(){d3.selectAll("rect").on("click",(function(d){window.top.yearClicked=d.data.year}))}const halfWidth=parseFloat(window.getComputedStyle(document.getElementById("svg-bar-chart")).getPropertyValue("width"))/2,incidentsTextWidth=vw(10);function getLegendRectX(i){switch(i){case 0:return halfWidth-2.5*margin-incidentsTextWidth;case 1:return halfWidth+margin}}function plotLegend(){d3.select("#svg-legend").attr("height",margin).selectAll("g").data(colors).enter().append("g").attr("id",(function(d,i){return"legend-entry-"+colors[i]})).attr("class","legend-entry").attr("font-size","3vh").append("rect").attr("class","rect-legend").attr("x",(function(d,i){return getLegendRectX(i)})).attr("width",margin).attr("height",margin).style("fill",(function(d,i){return colors[i]}))}function getLegendLabelX(i){switch(i){case 0:return halfWidth-margin-incidentsTextWidth;case 1:return halfWidth+2.5*margin}}function getLegendLabelText(i){switch(i){case 0:return labelBlack;case 1:return labelRed}}function labelsLegend(){"0"==seriesNum||"2"==seriesNum?(labelBlack="Incidents",labelRed="Homicide Incidents"):(labelBlack="Victims",labelRed="Killed");const labels=document.querySelectorAll(".label-legend");labels&&labels.forEach((function(label){label.parentNode.removeChild(label)})),d3.selectAll(".legend-entry").append("text").attr("class","label-legend").text((function(d,i){return getLegendLabelText(i)})).attr("x",(function(d,i){return getLegendLabelX(i)})).attr("y",margin/2).attr("dy",".35em").attr("font-size","1.2em")}function buildBarChart(){setSeriesVars(),plotBarChart(),labelsBarChart(),bindRectHoverListeners(),bindRectClickListeners()}function handlerChangeSeries(){buildBarChart(),labelsLegend()}d3.csv("data/yearlyData.csv").then((function(data){window.data=data,seriesNames=[data.columns.slice(1,3),data.columns.slice(3,5),data.columns.slice(5,7),data.columns.slice(7,9)],buildBarChart(),plotLegend(),labelsLegend()})),document.getElementById("select-series").addEventListener("change",handlerChangeSeries);